{"version":3,"sources":["contexts/AdjListContext.tsx","components/graph.tsx","pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdjListContext","createContext","AdjListProvider","children","useState","elements","nodes","edges","graphElements","setGraphElements","AddNode","graph","nodeID","filter","node","data","id","length","push","label","providerValue","setInputText","text","graph_elements","trim_lines","split","map","trim","console","log","res","reduce","acc","line_text","values","src","dest","weight","source","target","Provider","value","useAdjList","useContext","Graph","useEffect","cyRefC","current","remove","add","layout","name","run","useRef","Fragment","GraphDiv","CytoscapeComponent","normalizeElements","cy","styled","HomePage","HomePageWrapper","HomePageHeader","HomePageContent","InputTextArea","onChange","change","currentTarget","div","textarea","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a90c2de4.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nexport interface elements {\n    elements: {\n        nodes: {\n            data: {\n                id: string;\n                label:string;\n            };\n        }[];\n        edges: {\n            data: {\n                id: string;\n                source: string;\n                target: string;\n                weight: number;\n            };\n        }[];\n    }\n}\n\nexport interface childrenProps {\n  children: React.ReactNode;\n}\n\nexport interface AdjListProviderProps {\n  graphElements: elements;\n  setInputText: (text: string) => void;\n}\n\nconst AdjListContext = createContext<AdjListProviderProps | null>(null);\n\nexport const AdjListProvider = ({ children }: childrenProps) => {\n    const get_empty_graph = (): elements => {\n        return {\n            elements:{\n                nodes:[],\n                edges:[],\n            }\n        }\n    }\n    const [graphElements, setGraphElements] = useState<elements>(get_empty_graph());\n\n\n    const AddNode = (graph,nodeID) =>{\n\n        const matches=graph.elements.nodes.filter((node)=> {\n            return node.data.id === nodeID\n        })\n        if (matches.length===0){\n            graph.elements.nodes.push({ data: { id: nodeID , label:nodeID} })\n        }\n\n    } \n\n    const setInputText = (text)=>{\n        const graph_elements=get_empty_graph();\n        const lines=text.split(/\\r?\\n/)\n        const trim_lines=lines.map((text)=> text.trim())\n        console.log(graph_elements)\n        const res=trim_lines.reduce((acc:elements, line_text) => {\n            if(line_text===\"\") return acc\n            const values=line_text.split(' ')\n            let [src,dest,weight] = [...values]\n            console.log('line_text',src, dest, weight)\n            AddNode(acc,src)\n            AddNode(acc,dest)\n            if(!weight) weight=1;\n            if(src && dest ) acc.elements.edges.push({ data: { id: src+dest, weight: weight, source: src, target: dest }})\n            return acc;\n        },graph_elements)\n        setGraphElements(res);\n    }\n\n    const providerValue: AdjListProviderProps = {\n        graphElements,\n        setInputText\n\n    };\n    return <AdjListContext.Provider value={providerValue}>{children}</AdjListContext.Provider>;\n};\n\n\n\nconst useAdjList = () =>{\n    return useContext(AdjListContext)\n};\n\nexport default useAdjList;\n","import React,{useRef,useEffect} from 'react';\nimport styled from 'styled-components';\nimport cytoscape from 'cytoscape';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport useAdjList, {AdjListProviderProps} from '../contexts/AdjListContext';\n\nconst Graph = () => {  \n\n    const {graphElements}=useAdjList() as AdjListProviderProps;\n\n    console.log('elem',graphElements)\n    // const [isMounted, setIsMounted] = useState(false);\n    // const [cy,setCy]=useState<cytoscape.Core>();\n  \n    // useEffect(()=>{\n    //   console.log('mount', cyRefC.current)\n    //   cyRefC.current.mount(divRef.current as unknown as HTMLElement)\n    //   cyRefC.current.center();\n    // })\n\n      // useEffect(()=>{\n      //     if(cyRefC.current){\n      //       console.log('remove')\n      //       // cyRefC.current.remove('node')\n      //       cyRefC.current.add(graphElements.elements);\n      //     }\n      //   },[ graphElements])\n\n    // const addNode=()=>{\n    //     cy.add({\n            \n    //             nodes: [\n    //               {\n    //                 data: { id: 'c' }\n    //               }\n    //             ],\n    //             edges:[\n    //                 {\n    //                     data: { id: 'ac', source: 'a', target: 'c' },\n    //                 },\n    //                 {\n    //                     data: { id: 'bc', source: 'b', target: 'c' }\n    //                 }\n    //             ]\n    //         }\n    //     )\n    //     cy.layout({'name':'cose'}).run();\n    // }\n\n    useEffect(()=>{\n      if(cyRefC.current){\n          cyRefC.current.elements().remove();\n          cyRefC.current.add(graphElements.elements);\n          cyRefC.current.layout({ name: 'cose' }).run()\n      }\n   },[graphElements]);\n    \n    const cyRefC=useRef<cytoscape.Core | null >(null)\n    // const update =(cy) =>{\n    //   cy.remove('node');\n    //   cy.add(graphElements.elements);\n    // //         cy.add(graphElements.elements);\n    // }\n    console.log('rerender')\n     \n    const layout = { name: 'cose' };\n    // const divRef=useRef(null);\n    return (\n    <React.Fragment>\n        {/* <h1>algo</h1> */}\n        {/* <AddNodeButton onClick={addNode}>Add a node </AddNodeButton> */}\n        {/* <GraphDiv ref={divRef} id=\"a\">\n            \n        </GraphDiv> */}\n          <GraphDiv elements={\n            CytoscapeComponent.normalizeElements( graphElements.elements)} \n            cy={(cy)=> cyRefC.current=cy}\n            layout={layout}/>;\n    </React.Fragment>\n    );\n}\n\nexport default Graph;\n\n\nconst GraphDiv =styled(CytoscapeComponent)`\n    min-height:80vh;\n    background:#fff;\n    flex:1;\n    margin:20px;\n`\n\n// const AddNodeButton =styled.button`\n//     padding:10px;\n//     margin:10px;\n\n    \n// `","import React from 'react';\nimport styled from 'styled-components';\nimport GraphDisplayArea from '../components/graph'\nimport useAdjList, {AdjListProviderProps} from '../contexts/AdjListContext';\nconst HomePage = () => {\n\n    const {setInputText} = useAdjList() as AdjListProviderProps;\n    \n    const handleTextAreaChange = (text) =>{\n        console.log(text)\n        setInputText(text)\n    }\n\n    return (\n    <HomePageWrapper>\n        <HomePageHeader>\n            <h1> Graph simulations </h1>\n            <p>write your graph in a adjacency list form and we wil draw it for you</p> \n\n        </HomePageHeader>\n        <HomePageContent>\n            \n            <InputTextArea onChange={change => handleTextAreaChange(change.currentTarget.value)}/>\n            <GraphDisplayArea/>\n        </HomePageContent>\n    </HomePageWrapper>\n    );\n}\n\nexport default HomePage;\n\n\nconst HomePageWrapper= styled.div`\n\n    background: #8cc0c2;\n    min-height: 100vh;\n\n\n`\n\nconst HomePageHeader= styled.div`\n    text-align:center;\n\n    & h1{\n        margin-top:0;\n        padding:0;\n    }\n\n`\n\nconst HomePageContent= styled.div`\n    min-height: 80vh;\n    display:flex;\n    flex-direction:row;\n    flex-wrap:wrap;\n    justify-content:center;\n\n`\n\nconst InputTextArea= styled.textarea`\n    min-height: 80vh;\n    width:25%;\n    min-width:300px;\n    margin:20px;\n    font-size:24px;\n    text-align:left;\n`","import React from 'react';\nimport HomePage from './pages/HomePage';\nimport {AdjListProvider} from './contexts/AdjListContext'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AdjListProvider>\n        <HomePage/>\n      </AdjListProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}